/**********************************************************
* Project 4: Gerp
* CS 15
* README
* Edited 12/10/2023
*********************************************************/

Compile/run:
    Gerper:
    - Compile gerp using 
        make gerp
    -run executable with 
        ./gerp [DirectoryToIndex] [OutputFile]
    Phase 1:
     - Compile FSTreeTraversal using
            make traverse_exec
     - run executable with
            ./traverse_exec [directory_name]
     - run stripNonAlphaNum tests with  
            unit_test

Program Purpose:
    Gerper:
    -to index and search files for single-word strings within a given
    directory by processing the files in the directory and storing their
    contents. Given a query by the user, the program will 
    direct all the lines in which the query appears to the given output
    file provided by the user. It has the option for case sensitive and case
    insensitive search. With case sensitive, the exact word will be searched
    and case insensitive will treat upper and lower case as the same. It also
    has the option of changing the output file where the lines will be stored
    while asking for queries. 
    Phase 1:
    -To implement the necessary functions for phase 1, which are: 
    -FSTreeTraversal: Traverses a tree consisting of DirNodes which represent 
    directories and files, printing out the paths to each file. 
    Contains the main program and function 
    declaration and implementation of tree_traverse.
    -stringProcessing.cpp: This function parses through a string, 
    getting rid of the non alphanumeric characters at the front and back.

Architectural Overview
    The Gerper class utilizes the HashT class, having a HashT as the value 
    for the key-value pairs inside the main HashT. (The main HashT has keys 
    of type string and values of type HashT, while those inner HashT's have 
    keys of type string and the value type is a set of ints). 

    An FSTree is initialized by passing it the filename provided by the user
    This FSTree class contains DirNodes which may or may not have 
    subdirectories and files. This tree is traversed recursively
    by one of the Gerper funtions to obtain the file paths. 

    stringProcessing.h is used when calling the function stripNonAlphaNum
    while readings words in a file and storing them in the big and smaller
    hash tables. When handling queries, this functions is also used to 
    make sure that a correclty formatted word is searched.
    

Acknowledgements: 
     https://www.cplusplus.com for information on isalpha and substring
     Consulted slideshows for help with the template.
     Went to office hours. Vedant helped us with properly saving the 
     size of a vector by doing (int).

Files: 
    FSTreeTraversal.cpp
        File containing a main program for phase1 which tests the function
        responsible for printhing the paths of the files
    Gerper.cpp
        The implementation for the Gerper class. The class uses two Hash 
        tables to store the words and their lines. It is responsible 
        for saving the files as well as the lines in each file. It also
        prints lines and asks the user for queries.
    Gerper.h
        The interface of the gerper class. This class contains a structure
        representing the information for a line as well as a hash table 
        whose value type is another hash table. This smaller hash table 
        has a value type which is a set of integers. It contains all the
        functions responsible for indexing files as well as finding 
        queries.
    HashT.cpp
        The implementation of the hashT class. It is responsible for 
        constructing a hash table of a given size as well as insertion,
        rehashing/expanding, and finding a value.
    HashT.h
        The interface for the HashT class. It uses a vector of vectors 
        to use chaining. The inner vector contains pairs of strings
        and a value_types selected by the client. It also has a set of 
        integers which has the indices of the filled buckets of the outer
        vector.
    main.cpp
        File that creates an instance of the Gerper class and runs the
        program. Also creates an output file stream to be able to 
        write to the user inputted output file
    MakeFile
        The file responsible for building the program and compiling, then
        linking all files together.
    README
        This file describes the gerper class overall.
    unit_tests.h
        Test using the unit test framework to test the phase one function of 
        stripNonAlphaNum. Also tested past versions of the read_file_mario
        function as well as the test_to_Lower function.
    FSTreeTraversal.cpp
        Contains the main program and function declaration and 
        implementation of tree_traverse.
    stringProcessing.h
        The declaration of the stripNonAlphaNum function
    stringProcessing.cpp
        The definition of the function stripNonAlphaNum. This function parses
        through a string, getting rid of the non alphanumeric characters at 
        the front and back.

Data Structures:

    We used a vector of vectors to implement the HashT class. Vectors
    are arrays with no fixed size. They implement the list ADT, which 
    entails a data structure that stores elements in a list with a 
    specific order (though not necessarily sorted) and includes functions
    for insertion, removal (can be from particular index), replacement, 
    getting size, checking whether it is empty, and retrieval of elements.

    Our HashT's vector of vectors is a data structure that is similar to 
    a 2-D array, except it has no fixed amount of rows or columns. This 
    was the optimal choice for our implementation of a hash table because
    we need our hash table to be able to accomodate an unfixed amount of 
    elements (we need it to expand automatically). 

    The reason we utilized a vector of vectors is for chaining, in order
    to handle collisions. That way, if two distinct key-value pairs get
    assigned the same index after moding by the table size, we can 
    still get to those elements by iterating through the bucket.
    In other words, using chaining means that each bucket has a list/vector
    of key-value pairs.

    A Hash Table was used since it was not only intuitive to use key 
    and values, but also because they provide O(1) performance on 
    average when doing operations like insertion and finding. Since 
    this assignment dealt with sotring words and line information 
    asssociated with them, it seemed natural to take this approach.

    To accomplish our HashT implementation, we used a hash function 
    responsible for mapping a key to an integer, which represents
    the index of the outer vector in this case. A good hash function is
    fast, deterministic, assigns different keys to same buckets with 
    extremely low probability, and spreads out keys well.
    
    This combined with the compression function ensured that the index 
    fell in a reasonable range that was less than the table size. A 
    rehashing or expanding function was also used to keep our load factor 
    below 0.7 to ensure good performance. This rehasing function is 
    necessary because an element's bucket might change with a different
    table size.

    Some disadvantages with Hash table are that they are not good at 
    operations that involve comparisons or linear ordering. Hashes
    have no notion of order. However, hashes were picked here 
    since they are really good at retrieval.

    To handle reading in the files and storing their contents, we used a 
    while loop with a condition getline which reads in a file line by line.
    This line was then converted into a string stream which allowed us to 
    read in words individually. All of this allowed us to save the line 
    in a line vector while also indexing the words individually at the 
    same time.

    To ensure that no repetitions occured in case insensitive queries, we
    merged all of the sets of ints for all the variations of a certain word.
    Then, we fed this to our function which handled printing from a set as 
    opposed to feeding each individual set to the function one by one.


    An N-ary Tree is used to represent the hierarchy of diretories and 
    files, where each node takes form of a DirNode and represents a 
    directory/subdirectory (including all corresponding file names, if any).

    N-ary Tree is a tree where nodes have any number of children.
     
